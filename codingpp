import time

start_time = time.time()
end_time = time.time()

print("\nRunning time: ", end_time-start_time)


from time import time


def printArray(arr):
    for i in range(len(arr)):
        print("[{:n}]: {:n}".format(i, arr[i]))

# will slow things down in absolute terms, but help tracking metrics
def resetCounters(dummy=None):
    global gnReadCount
    global gnWriteCount
    global gnCompareCount
    gnReadCount = 0
    gnWriteCount = 0
    gnCompareCount = 0



def readCell(array, index):
    global gnReadCount
    gnReadCount += 1
    try:
        return array[index]
    except:
        print('read aborted')
        raise



def writeCell(array, index, value):
    global gnWriteCount
    gnWriteCount += 1
    try:
        array[index] = value
    except:
        print('write aborted')
        raise



def compareCell(value1, value2):
    global gnCompareCount
    gnCompareCount += 1
    return (value1 > value2)



def bubbleSort(arr):

    resetCounters()

    tStart = time()

    n = len(arr)

    # Traverse through all array elements 
    for i in range(n):

        # Last i elements are already in place 
        for j in range(0, n-i-1):

            # traverse the array from 0 to n-i-1 
            # Swap if the element found is greater 
            # than the next element
            v1 = readCell(arr, j)
            v2 = readCell(arr, j+1)
            if compareCell(v1, v2):
                writeCell(arr, j, v2)
                writeCell(arr, j + 1, v1)

    print('Execution time (s) : {:f}'.format(time() - tStart))
    print('{:n} pass(es)'.format(i+1))

    return arr



if __name__ == '__main__':

# Driver code to test above 
#unsorted = [64, 34, 25, 12, 22, 11, 90] 
#printArray(unsorted)
    for s in ('random', 'sorted', 'reverse'):
        for n in (100, 1000, 10000):
            data = '{:s}-strings-{:s}.txt'.format(s, str(n))
            print(data)
            with open(data, 'r') as f:
                sorted = bubbleSort([l.rstrip('\n') for l in f])

#print ("Sorted array is:")
#printArray(sorted)

                print('Total elements     : {:n}\nTotal reads        : {:n}\nTotal writes       : {:n}\nTotal compares     : {:n}\n\n'.format(len(sorted), gnReadCount, gnWriteCount, gnCompareCount))
                
                def binarySearch(arr, l, r, x): 

	while l <= r: 

		mid = l + (r - l) // 2; 
        # mid = left + (right - left) // 2 == (left + right) // 2
		
		# Check if x is present at mid 
		if arr[mid] == x: 
			return mid 

		# If x is greater, ignore left half 
		elif arr[mid] < x: 
			l = mid + 1

		# If x is smaller, ignore right half 
		else: 
			r = mid - 1
	
	# If we reach here, then the element 
	# was not present 
	return -1

# Driver Code 
arr = [ 2, 3, 4, 10, 40 ] 
x = 10

# Function call 
result = binarySearch(arr, 0, len(arr)-1, x) 

if result != -1: 
	print ("Element is present at index % d" % result) 
else: 
	print ("Element is not present in array")
	
	
	def search(arr, n, x): 

	for i in range (0, n): 
		if (arr[i] == x): 
			return i; 
	return -1; 

# Driver Code 
arr = [ 2, 3, 4, 10, 40 ]; 
x = 10; 
n = len(arr); 
result = search(arr, n, x) 
if(result == -1): 
	print("Element is not present in array") 
else: 
	print("Element is present at index", result); 
	
	from queue import Empty
import time

class ArrayQueue:
    """FIFO queue implementation using a Python list as underlying storage."""
    DEFAULT_CAPACITY = 10   # moderate capacity for all new queues

    def __init__(self):
        """Create an empy queue"""
        self._data = [None] * ArrayQueue.DEFAULT_CAPACITY
        self._size = 0
        self._front = 0

    def __len__(self):
        """Return the number of elements in the queue"""
        return self._size

    def is_empty(self):
        """Return True if the queue is empty"""
        return self._size == 0

    def first(self):
        """Return but do not remove the element at the front of the queue.
        Raise exception if the queue is empty
        """
        if self.is_empty():
            raise Empty('Queue is empty')
        return self._data[self._front]

    def dequeue(self):
        """Remove and return the first element of the queue
        Raise empty exception if the queue is empty
        """
        if self.is_empty():
            raise Empty('Queue is empty')
        answer = self._data[self._front]
        self._data[self._front] = None  # assists garbage collection
        self._front = (self._front + 1) % len(self._data)
        self._size -= 1
        return answer

    def enqueue(self, e):
        """Add an element to the back of the queue"""
        if self._size == len(self._data):
            self._resize(2 * len(self._data))   # double array size
        avail = (self._front + self._size) % len(self._data)
        self._data[avail] = e
        self._size += 1

    def _resize(self, cap):             # we assume cap >= len(self)
        """Resize to a new list of capcaity >= len(self)."""
        old = self._data                # keep track of existing list
        self._data = [None] * cap       # allocate list a new capacity
        walk = self._front
        for k in range(self._size):     # only consider existing elements
            self._data[k] == old[walk]
            walk = (1 + walk) % len(old)  # use old size as modulus
        self._front = 0                 # front has been realigned


def reverse_queue(the_queue):
    reversed_queue = ArrayQueue()

    for item in range(len(the_queue._data)):
        if the_queue.is_empty():
            the_queue._data = reversed_queue._data
            return the_queue
        else:
            x = the_queue.first()
            reversed_queue.enqueue(x)
            the_queue.dequeue()


def print_queue(the_queue):
    for item in the_queue._data:
        if item is not None:
            print(item, end=" ")


if __name__ == '__main__':
    start_time = time.time()

    queue = ArrayQueue()
    queue.enqueue(1)
    queue.enqueue(2)
    queue.enqueue(3)
    queue.enqueue(4)
    queue.enqueue(5)

    reverse_queue(queue)
    print_queue(queue)

    end_time = time.time()

    print("\nTime to complete: ", end_time - start_time, "seconds")

